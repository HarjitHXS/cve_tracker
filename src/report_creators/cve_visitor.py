from abc import abstractmethod, ABCMeta
from typing import List, Dict


class CveVisitor(metaclass=ABCMeta):
    """ Abstract base class implementing the visitor pattern to produce CVE reports
        in various formats. Reports are generated by visiting CVEs in a data structure
        that organizes findings by source and by whether a CVE is new. Note that
        in this case, a CVE is considered to be new if it was not seen by a previous
        execution of CVE tracker. """

    @abstractmethod
    def start_visiting(self) -> str:
        """
        Signal that we are about to start visiting CVEs. This is done to ensure that
        we know when to open any tags or structures the report format requires to
        start properly formatting the report.
        """
        raise NotImplementedError("You did not implement the start_visiting method")

    @abstractmethod
    def visit_source(self, cve_source: str, new_cves: List[Dict[str, str]],
                     old_cves: List[Dict[str, str]]) -> str:
        """
        Visit each CVE found for dependencies defined in a particular package file
        format (e.g. pip, Bazel, etc.). CVEs are listed as either new or old to make
        it easier to highlight in the report which CVEs have not been seen in previous
        reports.

        Args:
            cve_source (str): The type of package file used to define the dependencies
                that contained the CVEs listed in the parameters documented below
            new_cves (List[Dict[str, str]]): A list of CVE dictionaries where each
                entry reflect a CVE not seen by previous CVE Tracker runs. CVE
                dictionary fields are documented in cve_tracker.py
            old_cves (List[Dict[str, str]]): A list of CVE dictionaries where each
                entry reflect a CVE that was seen by previous CVE Tracker runs

        Returns:
            str: a string containing a section of the report formatted properly
                for the report type the specific visitor generates. The report
                section contains all CVEs discovered for a particular source
        """
        raise NotImplementedError("You did not implement the visit_source method")

    @abstractmethod
    def finished_visiting(self, dependencies: List[Dict[str, str]]) -> str:
        """
        Signal that we are done visiting CVEs. This is done to ensure that
        we know when to close any tags or structures that need to be closed to finish
        the report.
        """
        raise NotImplementedError("You did not implement the finished_visiting method")
